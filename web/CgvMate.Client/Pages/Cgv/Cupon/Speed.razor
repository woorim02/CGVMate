@using CgvMate.Components
@using CgvMate.Data.Entities.Cgv
@attribute [Route(Constants.event_cupon_speed)]
@inject NavigationManager Navigation
@inject IJSRuntime Runtime
@inject CgvMateApi api

<PageTitle>스피드쿠폰 자동 확인</PageTitle>
<HeadContent>
    <meta name="keywords" content="소액 대출, 보험 계약 대출, 급여 대출, 비상금 대출, 학자금 대출, 할부, 당일 대출 가능한곳" />
</HeadContent>
<article class="article" id="speed-cupon-article">
    <header class="article-header">
        <div class="switch-container">
            <label id="toggle-switch-label" for="toggle_switch1">
                <span>스피드쿠폰 자동 확인</span>
                <span class="switch-wrap">
                    <ToggleSwitch id="toggle_switch1"
                        style="padding-left: 1rem; margin:auto; inline; float:right; width:40px; height:20px;"
                        OnChangeCallback=OnChange></ToggleSwitch>
                </span>
            </label>
        </div>
        <div class="select-container border-top">
            <select class="form-select" style="padding-left:0.5rem; margin-left:0.5rem" @bind=selectedMovieIndex>
                <option value="@selectedMovieIndex_default" selected>All</option>
                @for (int i = 0; i < Cupons.Count; i++)
                {
                    <option value="@Cupons[i].MovieIndex">@Cupons[i].MovieTitle</option>
                }
            </select>
        </div>
    </header>

    <section class="article-body">

        <script async
            src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2422895337222657"
            crossorigin="anonymous"></script>
        <!-- 하단 배너 -->
        <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2422895337222657"
            data-ad-slot="2485625472" data-ad-format="auto" data-full-width-responsive="true"></ins>
        <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
        <ul class="list-group">
            @foreach (var item in ProcessTexts)
            {
                <li>
                    <p class="list-group-item">
                        @((MarkupString)item)
                    </p>
                </li>
            }
        </ul>
    </section>
</article>

@code {
    private bool IsRunning { get; set; } = false;
    private List<SpeedCupon> Cupons { get; set; } = new List<SpeedCupon>(100);
    private List<string> ProcessTexts = new List<string>(100);

    private const string selectedMovieIndex_default = "nullmoviewqwegv";
    private string? selectedMovieIndex = selectedMovieIndex_default;


    ~Speed()
    {
        IsRunning = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Cupons = await api.GetSpeedCuponCountsAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        Navigation.RegisterLocationChangingHandler((args) =>
        {
            IsRunning = false;
            return ValueTask.CompletedTask;
        });
    }

    private void OnChange(ChangeEventArgs args)
    {
        if (!IsRunning)
        {
            IsRunning = true;
            Task.Run(CheckCupon);
        }
        else
        {
            IsRunning = false;
        }
    }

    private async Task CheckCupon()
    {
        while (IsRunning)
        {
            await Task.Delay(500);
            var cupons = await api.GetSpeedCuponCountsAsync();
            var selectedCupons = selectedMovieIndex == selectedMovieIndex_default ? cupons : cupons.Where(x => x.MovieIndex ==
            selectedMovieIndex);
            ProcessTexts = new List<string>(cupons.Count);
            foreach (var cupon in selectedCupons)
            {
                if (cupon.Count % 100 != 0)
                {
                    ProcessTexts.Add($"[{DateTime.Now:hh:mm:ss.ff}] " +
                    $"[{cupon.MovieTitle}] : " +
                    $"<span class='count' style='color:lawngreen;'>{cupon.Count}</span>");
                }
                else
                {
                    ProcessTexts.Add($"[{DateTime.Now:hh:mm:ss.ff}] " +
                    $"[{cupon.MovieTitle}] : " +
                    $"<span class='count'>{cupon.Count}</span>");
                }
                await InvokeAsync(async () =>
                {
                    StateHasChanged();
                    await Runtime.InvokeVoidAsync("scrollBottom", "speed-cupon-article");
                });
            }
        }
    }

}