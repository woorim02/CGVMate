@using CgvMate.Client.Api
@using CgvMate.Data.Entities.Megabox
@attribute [Route(Constants.megabox_event_giveaway_detail)]
@inject MegaboxMateApi api
@inject IJSRuntime JSRuntime

<PageTitle>@gift_name 경품 수량 확인</PageTitle>

<article class="tl">
    <div class="header">
        <div class="header-title">
            <p id="header-text">
                잔여 수량 확인
            </p>
        </div>
    </div>
    <div class="content-wrap">
        <div class="header-title2">
            <p class="header-content">
                @if (gift_name is not null)
                {
                    @gift_name
                }
            </p>
        </div>
        <div>
            <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2422895337222657"
                    crossorigin="anonymous"></script>
            <!-- 상단 배너 -->
            <ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="ca-pub-2422895337222657"
                 data-ad-slot="3730871491"
                 data-ad-format="auto"
                 data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>
        <div class="content">
            @if (info is not null)
            {
                <div class="contentL">
                    <ul class="area-list">
                        @foreach (var item in info.Areas)
                        {
                            <li id="area-@item.Code"
                                class="@(item.Code == currentArea ? "active" : string.Empty)" style="display: block"
                                @onclick="async arg => await SelectAreaTheaterList(item.Code)">
                                <a href=@($"{Constants.megabox_event_giveaway_detail}?eventIndex={EventID}&areaCode={item.Code}")>
                                    @item.Name
                                </a>
                            </li>
                        }
                    </ul>
                </div>
                <div class="contentR">
                    @{
                        var cinemaItems = info.Areas.Where(x => x.Code == (currentArea ?? "10")).First().Infos;
                    }
                    <ul class="theater-list">
                        @for (int i = 0; i < cinemaItems.Count; i++)
                        {
                            var item = cinemaItems[i];
                            <li class="theater">
                                <div class="theater-name">
                                    <b class="theater-name">@item.Name</b>
                                </div>
                                <div>
                                    <b class="theater-state @item.fAc">@item.fAc</b>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <div class="contentL">
                    <ul class="area-list">
                        @for (int i = 0; i < 10; i++)
                        {
                            <li class="theater" style="display: block; color:white">
                                ...
                            </li>
                        }
                    </ul>
                </div>
                <div class="contentR">
                    <ui class="theater-list">
                        @for (int i = 0; i < 15; i++)
                        {
                            <li class="theater" style="display: block; color:white">
                                ...
                            </li>
                        }
                    </ui>
                </div>
            }
        </div>
    </div>

</article>

@code {
    [SupplyParameterFromQuery(Name = "eventIndex")]
    public string? EventID { get; set; }
    [SupplyParameterFromQuery(Name = "areaCode")]
    private string? currentArea { get; set; }

    private string? gift_id;
    private string? gift_name;
    private GiveawayEventDetail? info;

    protected override async Task OnInitializedAsync()
    {
        if (EventID is null)
            return;
        if (currentArea is null)
            currentArea = "10";
        info = await api.GetGiveawayEventDetailAsync(EventID);
        gift_id = info.ID;
        gift_name = info.Title;
    }

    private async Task SelectAreaTheaterList(string areaCode)
    {
        StateHasChanged();
    }

    private static string CountTypeCodeToText(string type)
    {
        switch (type)
        {
            case "type4": return "마감 되었습니다.";
            case "type3": return "재고 소진 임박 입니다.";
            case "type2": return "재고 보유 가능성이 높습니다.";
            default: return "unknown";
        }
    }

    private static string CountTypeCodeToColor(string type)
    {
        switch (type)
        {
            case "type4": return "#d3d3d3";
            case "type3": return "#fb4357";
            case "type2": return "#25c326";
            default: return "unknown";
        }
    }
}