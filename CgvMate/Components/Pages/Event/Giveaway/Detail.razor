@page "/event/giveaway/detail"
@inject CgvService Service
@inject IJSRuntime JSRuntime

<article class="tl">
    <div class="header">
        <p id="header-text">
            @if (model is not null)
            {
                @model.Title
            }
        </p>
    </div>
    <div class="content">
    @if (info is not null)
    {
        if(info.Areas.Select(x=>int.Parse(x.TheaterCount)).Sum() > 10)
        {
            <div class="contentL">
                <ul class="area-list">
                    @foreach (var item in info.Areas)
                    {
                        <li id="area-@item.AreaCode" class="@(item.AreaCode == "13" ? "active" : string.Empty)" style="display: block"
                            @onclick="async arg => await GetAreaTheaterList(item.AreaCode)">
                            <a href="javascript:void(0)">
                                @item.AreaName
                                <span>(@item.TheaterCount)</span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <div class="contentR">
            <ui class="theater-list">
                @foreach (var item in info.TheaterGiveawayInfos)
                {
                    <li class="theater">
                        <span class="theater-name">@item.TheaterName</span>
                        <div>
                            <span class="theater-count" style="background-color: @CountTypeCodeToColor(item.CountTypeCode);">
                                @item.GiveawayRemainCount
                            </span>
                            <span class="theater-state">@CountTypeCodeToText(item.CountTypeCode)</span>
                        </div>
                    </li>
                }
            </ui>
        </div>
        }
    </div>
</article>

@code {
    [SupplyParameterFromQuery(Name = "eventIndex")]
    public string? EventIndex { get; set; }

    private GiveawayEventModel? model;
    private GiveawayInfo? info;

    protected override async Task OnInitializedAsync()
    {
        model = await Service.Event.GetGiveawayEventModelAsync(EventIndex!);
        info = await Service.Event.GetGiveawayInfoAsync(model.GiveawayIndex);
    }

    private async Task GetAreaTheaterList(string areaCode)
    {   
        await JSRuntime.InvokeVoidAsync($"ShowTheatersPartial", $"area-{areaCode}");
        if (model is null)
            return;
        info = await Service.Event.GetGiveawayInfoAsync(model.GiveawayIndex, areaCode);
        StateHasChanged();
    }

    private static string CountTypeCodeToText(string type)
    {
        switch (type)
        {
            case "type4": return "마감 되었습니다.";
            case "type3": return "재고 소진 임박 입니다.";
            case "type2": return "재고 보유 가능성이 높습니다.";
            default: return "unknown";
        }
    }

    private static string CountTypeCodeToColor(string type)
    {
        switch (type)
        {
            case "type4": return "#d3d3d3";
            case "type3": return "#fb4357";
            case "type2": return "#25c326";
            default: return "unknown";
        }
    }
}