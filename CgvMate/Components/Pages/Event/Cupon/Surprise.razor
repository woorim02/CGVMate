@attribute [Route(Constants.event_cupon_surprise)]
@inject CgvService Service
@inject NavigationManager Navigation
@inject IJSRuntime Runtime

<article class="article" id="speed-cupon-article">
    <header class="article-header">
        <div class="switch-container">
            <label id="toggle-switch-label" for="toggle_switch1">
                <span>서프라이즈 쿠폰 자동 확인</span>
                <span class="switch-wrap">
                    <ToggleSwitch id="toggle_switch1" style="padding-left: 1rem; margin:auto; inline; float:right; width:40px; height:20px; " OnChangeCallback="OnSwitchChange"/>
                </span>
            </label>
        </div>
        <div class="select-container border-top">
            <select class="form-select" style="padding-left:0.5rem; width:9rem;" @onchange=OnChangeInterval>
                <option value="500" selected>500ms(기본값)</option>
                @for (int i = 100; i < 1100; i += 100)
                {
                    if (i == 500)
                    {
                        continue;
                    }
                    <option value=@($"{i}")>@($"{i}ms")</option>
                }
            </select>
            <select class="form-select" style="padding-left:0.5rem; margin-left:0.5rem" @bind=selectedCuponIndex>
                @for (int i = 0; i < Cupons.Count; i++)
                {
                    if(i == 0)
                    {
                        <option value="@Cupons[i].Index" selected>@Cupons[i].Title</option>
                        continue;
                    }
                    <option value="@Cupons[i].Index">@Cupons[i].Title</option>
                }
            </select>
        </div>
    </header>

    <section class="article-body">
        <ul class="list-group">
            @foreach (var item in ProcessTexts)
            {
                <li>
                    <p class="list-group-item">
                        @((MarkupString)item)
                    </p>
                </li>
            }
        </ul>
    </section>
</article>

@code {
    private bool IsRunning { get; set; } = false;
    private List<SurpriseCupon> Cupons { get; set; } = new List<SurpriseCupon>(100);
    private List<string> ProcessTexts = new List<string>(100);
    private TaskProcessor Processor = new TaskProcessor(100, 1, TimeSpan.FromSeconds(0.5));

    private string? selectedCuponIndex;

    private CancellationTokenSource cts;

    ~Surprise()
    {
        IsRunning = false;
    }

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        var cuponEvents = await Service.Event.GetEvents(EventType.Movie);
        Cupons.Clear();
        foreach (var e in cuponEvents)
        {
            if (!e.EventName.Contains("선착순 무료 쿠폰"))
            {
                continue;
            }
            var surpriseCupon = new SurpriseCupon(e.EventId, e.EventName, 0, false);
            Cupons.Add(surpriseCupon);
        }
        selectedCuponIndex = Cupons.Count > 0 ? Cupons[0].Index : "";
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        Processor.ExceptionOccurred += OnExceptionOccurred;

        Navigation.RegisterLocationChangingHandler((args) =>
        {
            cts.Cancel();
            IsRunning = false;
            Processor.Stop();
            Processor.Clear();
            return ValueTask.CompletedTask;
        });
    }

    private void OnSwitchChange(ChangeEventArgs args)
    {
        if (!IsRunning)
        {
            IsRunning = true;
            Task.Run(CheckCupon);
            Processor.Start();
        }
        else
        {
            IsRunning = false;
            Processor.Stop();
            Processor.Clear();
        }
    }

    private async Task CheckCupon()
    {
        while (IsRunning)
        {
            Processor.TryEnqueue(async () =>
            {
                var cupon = await Service.Event.GetSurpriseCuponCountAsync(selectedCuponIndex);
                if (cupon.IsAvailable)
                {
                    ProcessTexts.Add($"[{DateTime.Now:hh:mm:ss.ff}] " +
                                 $"[{cupon.Title}] : " +
                                 $"<span class='count' style='color:lawngreen;'>{cupon.Count}</span>");
                }
                else
                {
                    ProcessTexts.Add($"[{DateTime.Now:hh:mm:ss.ff}] " +
                                 $"[{cupon.Title}] : " +
                                 $"<span class='count'>{cupon.Count}</span>");
                }
                await InvokeAsync(async () =>
            {
                StateHasChanged();
                await Runtime.InvokeVoidAsync("scrollBottom", "speed-cupon-article");
            });
            });
        }
    }

    private void OnChangeInterval(ChangeEventArgs args)
    {
        int val = int.Parse(args.Value.ToString());
        Processor.Interval = TimeSpan.FromMilliseconds(val);
    }

    int errorCount = 0;
    private async void OnExceptionOccurred(object? sender, ExceptionOccurredEventArgs args)
    {
        errorCount++;
        ProcessTexts.Add($"<span style='color:red;'>오류 발생: {args.Exception}</span>");
        if (errorCount > 5)
        {
            Processor.Stop();
            Processor.Clear();
            ProcessTexts.Add($"<span style='color:red;'>오류 발생: {args.Exception}</span>");
            return;
        }
        await InvokeAsync(StateHasChanged);
    }
}