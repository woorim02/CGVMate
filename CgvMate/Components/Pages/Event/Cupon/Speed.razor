@attribute [Route(Constants.event_cupon_speed)]
@inject CgvService Service
@inject NavigationManager Navigation
@inject IJSRuntime Runtime

<article class="article">
    <header class="article-header">
        <label id="toggle-switch-label" for="toggle_switch1">
            <span>스피드쿠폰 자동 확인</span>
            <span class="switch-wrap">
                <select class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind=selectedMovieIndex>
                    <option value="@selectedMovieIndex_default" selected>전체 스피드쿠폰 확인</option>
                    @for (int i = 0; i < Cupons.Count; i++)
                    {
                        <option value="@Cupons[i].MovieIndex">@Cupons[i].MovieTitle</option>
                    }
                </select>
                <ToggleSwitch id="toggle_switch1" style="padding-left: 1rem; margin:auto; inline; float:right; width:40px; height:20px; " OnChangeCallback="OnChange"></ToggleSwitch>
            </span>
        </label>
    </header>

    <section class="article-body">
        <ul class="list-group">
            @foreach (var item in ProcessTexts)
            {
                <li>
                    <p class="list-group-item">
                        @((MarkupString)item)
                    </p>
                </li>
            }
        </ul>
    </section>
</article>

@code{
    private bool IsRunning { get; set; } = false;
    private List<SpeedCupon> Cupons { get; set; } = new List<SpeedCupon>(100);
    private List<string> ProcessTexts = new List<string>(100);
    private TaskProcessor Processor = new TaskProcessor(100, 1, TimeSpan.FromSeconds(0.5));

    private const string selectedMovieIndex_default = "nullmoviewqwegv";
    private string? selectedMovieIndex = selectedMovieIndex_default;

    private CancellationTokenSource cts;

    ~Speed()
    {
        IsRunning = false;
    }

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        Cupons = await Service.Event.GetSpeedCuponCountsAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        Processor.ExceptionOccurred += OnExceptionOccurred;

        Navigation.RegisterLocationChangingHandler((args) =>
        {
            cts.Cancel();
            IsRunning = false;
            Processor.Stop();
            Processor.Clear();
            return ValueTask.CompletedTask;
        });
    }

    private void OnChange(ChangeEventArgs args)
    {
        if (!IsRunning)
        {
            IsRunning = true;
            Task.Run(CheckCupon);
            Processor.Start();
        }
        else
        {
            IsRunning = false;
            Processor.Stop();
            Processor.Clear();
        }
    }

    private async Task CheckCupon()
    {
        while (IsRunning)
        {
            Processor.TryEnqueue(async () =>
            {
                var cupons = await Service.Event.GetSpeedCuponCountsAsync();
                var selectedCupons = selectedMovieIndex == selectedMovieIndex_default ? cupons : cupons.Where(x => x.MovieIndex == selectedMovieIndex);

                foreach (var cupon in selectedCupons)
                {
                    if (cupon.Count % 10 != 0)
                    {
                        ProcessTexts.Add($"[{DateTime.Now:yy-MM-dd hh:mm:ss.f}] "+
                                         $"[{cupon.MovieTitle}] : "+
                                         $"<span class='count' style='color:lawngreen;'>{cupon.Count}</span>");
                    }
                    else
                    {
                        ProcessTexts.Add($"[{DateTime.Now:yy-MM-dd hh:mm:ss.f}] " +
                                         $"[{cupon.MovieTitle}] : " +
                                         $"<span class='count'>{cupon.Count}</span>");
                    }
                    await InvokeAsync(() => StateHasChanged());
                }
            });
        }
    }

    int errorCount = 0;
    private async void OnExceptionOccurred(object? sender, ExceptionOccurredEventArgs args)
    {
        errorCount++;
        ProcessTexts.Add($"<span style='color:red;'>오류 발생: {args.Exception}</span>");
        if(errorCount > 5)
        {
            Processor.Stop();
            Processor.Clear();
            ProcessTexts.Add($"<span style='color:red;'>오류 발생: {args.Exception}</span>");
            return;
        }
    }
}