@namespace CgvMate.Components.Layout
@using CommunityToolkit.Maui.Views;
@inject CgvService Service

<div class="@Class">
    <ul class="list-unstyled ps-0">
        <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#home-collapse" aria-expanded="@IsOpen.ToString()">
                이벤트
            </button>
            <div class=@(IsOpen ? "collapse show" :"collapse") id="home-collapse" onclick="document.querySelector('.btn-close').click()">
                <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                    <li>
                        <a href="@Constants.event_" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            이벤트 목록
                        </a>
                    </li>
                    <li>
                        <a href="#" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            서프라이즈 쿠폰 알림
                        </a>
                    </li>
                    <li>
                        <a href="@Constants.event_cupon_speed" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            스피드쿠폰 알림
                        </a>
                    </li>
                    <li>
                        <a href="/event/giveaway" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            경품 이벤트 현황
                        </a>
                    </li>
                    <li>
                        <a href="#" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            자동 경품 신청
                        </a>
                    </li>
                </ul>
            </div>
        </li>
        <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#dashboard-collapse" aria-expanded="@IsOpen.ToString()">
                예매
            </button>
            <div class=@(IsOpen ? "collapse show" :"collapse") id="dashboard-collapse" onclick="document.querySelector('.btn-close').click()">
                <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                    <li>
                        <a href="@Constants.reservation_notification" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            예매 오픈 알림
                        </a>
                    </li>
                    <li>
                        <a href="#" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            예매 매크로
                        </a>
                    </li>
                </ul>
            </div>
        </li>
        <li class="border-top my-3"></li>
        <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#account-collapse" aria-expanded="@IsOpen.ToString()">
                계정
            </button>
            <div class=@(IsOpen ? "collapse show" :"collapse") id="account-collapse" onclick="document.querySelector('.btn-close').click()">
                <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                    <li><a href="" @onclick="@ToggleLogin" class="link-body-emphasis d-inline-flex text-decoration-none rounded">
                            @if (IsLogined)
                            {
                                <span>로그아웃</span>
                            }
                            else
                            {
                                <span>로그인</span>
                            }
                        </a>
                    </li>
                </ul>
            </div>
        </li>
    </ul>
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; } = false;
    [Parameter]
    public string Class { get; set; } = "sidebar";

    private bool IsLogined { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLogined = await Service.Auth.GetLoginStateAsync();
    }

    private async Task ToggleLogin()
    {
        if (IsLogined)
        {
            Logout();
        }
        else
        {
            await Login();
        }

    }

    private async Task Login()
    {
        LoginPopup popup = new LoginPopup(Service);
        bool? isSuccess = (bool?) await App.Current.MainPage.ShowPopupAsync(popup);
        if (isSuccess is null)
            return;
        if (isSuccess.Value)
        {
            await InvokeAsync(async () => await App.Current.MainPage.DisplayAlert("로그인", "로그인 성공", "확인"));
            IsLogined = true;
        }
        else
        {
            IsLogined = false;
        }
    }

    private void Logout()
    {
        
    }
}
